<div class="row">
    <div class="container">
    <?php

        if ($msg = $this->{'session\messages'}('overview')) {
            echo '<div class="alert alert-' . $msg['type'] . '" role="alert"><strong>', $msg['message'], '</strong></div>';
        }

    ?>
        <h2 id="summary">Summary</h2>
        <p>The <a href="https://github.com/mvc5/mvc5">Mvc5 Framework</a> provides a fresh approach to <a href="http://www.php.net">PHP</a> programming. It is written from the ground up as a functional object-oriented system using immutable components. At its core is a next generation <a href="#dependency-injection">dependency injection</a> management <a href="#plugins">plugin</a> system.</p>

        <h2 id="web-application">Web Application</h2>
        <p>The <a href="https://github.com/mvc5/mvc5-application">mvc5-application</a> demonstrates its usage as a <a href="https://github.com/mvc5/mvc5/blob/master/src/Web.php">web application</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>include __DIR__ . '/../vendor/autoload.php';
</code></pre>
        </div>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>return [
    'cache'      =&gt; __DIR__ . '/../tmp',
    'cookie'     =&gt; include __DIR__ . '/cookie.php',
    'events'     =&gt; include __DIR__ . '/event.php',
    'middleware' =&gt; include __DIR__ . '/middleware.php',
    'routes'     =&gt; include __DIR__ . '/route.php',
    'services'   =&gt; include __DIR__ . '/service.php',
    'session'    =&gt; include __DIR__ . '/session.php',
    'templates'  =&gt; include __DIR__ . '/template.php',
    'view'       =&gt; __DIR__ . '/../view',
    'web'        =&gt; include __DIR__ . '/web.php',
];
</code></pre>
        </div>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>(new Web(include __DIR__ . '/../config/config.php', null, true))();
</code></pre>
        </div>
        <p>A default <a href="https://github.com/mvc5/mvc5-application/blob/master/config/config.php">configuration</a> is provided with the minimum <a href="https://github.com/mvc5/mvc5/tree/master/config">configuration</a> required to run a <a href="https://github.com/mvc5/mvc5-application/blob/master/config/web.php">web</a> <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">application</a>. It contains configurations for PSR-7 compatible <a href="https://github.com/mvc5/http-message/blob/master/config/service.php#L11">request</a> and <a href="https://github.com/mvc5/http-message/blob/master/config/service.php#L13">response</a> classes, <a href="https://github.com/mvc5/mvc5-application/blob/master/config/template.php">templates</a> and <a href="#routes">routes</a>. The third parameter passed to the <a href="https://github.com/mvc5/mvc5/blob/master/src/Web.php">web</a> class binds the scope of the <a href="http://php.net/manual/en/functions.anonymous.php#functions.anonymous">anonymous functions</a>, within the <a href="https://github.com/mvc5/mvc5-application/blob/master/config/service.php">service configuration</a>, to the <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">application</a> class.</p>

        <h2 id="console-application">Console Application</h2>
        <p>A simple <a href="https://github.com/mvc5/mvc5-application/blob/master/app.php">console application</a> can be created by passing <a href="http://php.net/manual/en/reserved.variables.argv.php">command line arguments</a> to the <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Service.php">service</a> <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> method.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>./app.php 'Console\Example' Monday January
</code></pre>
        </div>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>include './init.php';

(new App('./config/config.php'))-&gt;call($argv[1], array_slice($argv, 2));
</code></pre>
        </div>

        <p>The first argument is the name of the function to <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> and the remaining arguments are its parameters, e.g <a href="https://github.com/mvc5/mvc5-application/blob/master/src/Console/Example.php"><code>Console\Example</code></a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>namespace Console;

use Home\ViewModel;

class Example
{
    /**
     * @var ViewModel
     */
    protected $model;

    /**
     * @param ViewModel $model
     */
    function __construct(ViewModel $model)
    {
        $this-&gt;model = $model;
    }

    /**
     * @param $day
     * @param $month
     */
    function __invoke($day, $month)
    {
        var_dump($this-&gt;model);
        echo $day . ' ' . $month . "\n";
    }
}
</code></pre>
        </div>

        <p>An <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">application</a> can also work without a configuration.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>(new App)-&gt;call($argv[1], array_slice($argv, 2));;
</code></pre>
        </div>

        <p>Read more about <a href="#dependency-injection">dependency injection</a>, <a href="#autowiring">autowiring</a> and <a href="#named-arguments">named arguments</a> for how required arguments can automatically be resolved.</p>

        <h2 id="environment-aware">Environment Aware</h2>
        <p>Development configuration settings can override production values using <a href="http://php.net/manual/en/function.array-merge.php">array_merge</a> as each <a href="https://github.com/mvc5/mvc5-application/blob/master/config/config.php">config</a> file returns an array of values.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>return array_merge(
    include __DIR__ . '/../config.php',
    [
        'db_name' =&gt; 'dev'
    ]
);
</code></pre>
        </div>

        <p>For example, the development config file <code>config/dev/config.php</code> can include the production config file <code>config/config.php</code> and override the name of the database to use in the development environment.</p>

        <h2 id="models-and-arrayaccess">Models and ArrayAccess</h2>
        <p>Value objects use a <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Model.php">model</a> interface to provide a common set of access methods.</p>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>namespace Mvc5\Config;

interface Model
    extends \ArrayAccess, \Countable, \Iterator
{
    function get($name);
    function has($name);
    function with($name, $value = null);
    function without($name);
}
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Model.php">model</a> interface is then extended to provide a <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Configuration.php">configuration</a> interface containing the methods <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Configuration.php#L22">set</a> and <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Configuration.php#L15">remove</a>.</p>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>namespace Mvc5\Config;

interface Configuration
    extends Model
{
    function remove($name);
    function set($name, $value = null);
}
</code></pre>
        </div>

        <p>By <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/ReadOnly.php">protecting</a> access to the mutable <a href="http://php.net/manual/en/class.arrayaccess.php">ArrayAccess</a> methods and object <a href="http://php.net/manual/en/language.oop5.magic.php">magic methods</a> an <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Immutable.php">immutable</a> interface can be implemented.</p>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>namespace Mvc5\Config;

trait ReadOnly
{
    use Config {
        remove as protected;
        set as protected;
    }

    function offsetSet($name, $value)
    {
        throw new \Exception;
    }

    function offsetUnset($name)
    {
        throw new \Exception;
    }

    function __set($name, $value)
    {
        throw new \Exception;
    }

    function __unset($name)
    {
        throw new \Exception;
    }
}
</code></pre>
        </div>

        <p>Where possible, all of the Mvc5 value objects are <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Immutable.php">immutable</a>.</p>

        <p>The <a href="http://php.net/manual/en/class.arrayaccess.php">ArrayAccess</a> interface also enables the <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Manager.php">service manager</a> to <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L321">retrieve</a> composite configuration values. E.g.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Param('templates.error');
</code></pre>
        </div>

        <p>Resolves to</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>$config['templates']['error'];
</code></pre>
        </div>

        <p>This makes it possible to use an array or a <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Configuration.php">configuration</a> object when <a href="http://php.net/manual/en/language.references.php">references</a> are needed. Implementing the <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Model.php">model</a> interface allows a component to only have to specify its immutable methods.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>interface Route
    extends Model
{
    function controller();
    function path();
}
</code></pre>
        </div>

        <p><a href="https://github.com/mvc5/mvc5/blob/master/src/Arg.php">Constants</a> can be used to reference specific keys when copying or updating an object.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>$request[Arg::NAME] = 'home';      //ArrayAccess
$request-&gt;set(Arg::NAME, 'home');  //Configuration
$request-&gt;with(Arg::NAME, 'home'); //Immutable
</code></pre>
        </div>

        <p><a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Model.php">Models</a> can also be made mutable by applying their traits to an instance of a <a href="https://github.com/mvc5/mvc5/blob/master/src/Config.php">configuration</a> object.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>class ViewModel
    extends \Mvc5\Config
    implements \Mvc5\View\ViewModel
{
    /**
     *
     */
    use \Mvc5\View\Config\ViewModel;
}
</code></pre>
        </div>

        <h2 id="routes">Routes</h2>
        <p>A collection of <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php">routes</a> are used to <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match.php">match</a> a <a href="https://github.com/mvc5/mvc5/blob/master/src/Http/Request.php">request</a> using <a href="https://github.com/mvc5/mvc5/blob/master/config/middleware.php#L7">middleware</a> route components. Each aspect of <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match.php">matching</a> a route to a <a href="https://github.com/mvc5/mvc5/blob/master/src/Http/Request.php">request</a> is a separate function. For example, <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Scheme.php">scheme</a>, <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Hostname.php">hostname</a>, <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php">path</a>, <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Method.php">method</a>, <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Wildcard.php">wildcard</a> and any other function can be <a href="https://github.com/mvc5/mvc5/blob/master/config/middleware.php#L7">configured</a>. If a <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php">route</a> does not contain a <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php#L90">regular expression</a>, it will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Definition/Build.php#L70">created</a> from the <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php#L68">path</a> configuration before being <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php#L47">matched</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>return [
    'home' =&gt; [
        'path' =&gt; '/{$}'
        'regex' =&gt; '/$'
        'controller' =&gt; 'Home\Controller'
    ],
    'app' =&gt; [
        'path' =&gt; '/{controller::*$}' //{controller:[a-zA-Z0-9/]+[a-zA-Z0-9]$}
    ],
]
</code></pre>
        </div>

        <p>Routes can be configured with a regular expression or a path. If the route is only used to <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php#L47">match</a> the request path, then only a regular expression is required. If the route is also used to create a url, then a path configuration is required.</p>

        <p>The regular expression can use group names that are <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php#L54">assigned</a> as request parameters when the route is <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php#L47">matched</a>. Consequently, the parameter names must be alphanumeric. The path configuration provides a simpler format for specifying regular expressions and group names. For example, if the matched url is <code>/about</code>, the <code>app</code> route configuration <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php#L54">assigns</a> the value <code>about</code> as the <code>controller</code> request parameter.</p>

        <p>Short names can also be assigned to regular expressions and be used in a path configuration by prefixing them with a single colon or two colons when assigned to a parameter name. Below are the default short-named regular expressions <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Definition/Tokens.php#L23">available</a> to use.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>[
    'a' =&gt; '[a-zA-Z0-9]++',
    'i' =&gt; '[0-9]++',
    'n' =&gt; '[a-zA-Z][a-zA-Z0-9]++',
    's' =&gt; '[a-zA-Z0-9_-]++',
    '*' =&gt; '.++',
    '*$' =&gt; '[a-zA-Z0-9/]+[a-zA-Z0-9]$'
]
</code></pre>
        </div>

        <p>The regular expression, or short-name, for a path configuration can also be specified as a constraint.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>return [
    'app' =&gt; [
        'path' =&gt; '/{controller}',
        'constraints' =&gt; [
            'controller' =&gt; '[a-zA-Z0-9/]+[a-zA-Z0-9]$'
        ]
    ],
]
</code></pre>
        </div>

        <p>Optional parameters are enclosed with square brackets <code>[]</code>. The syntax of the path configuration is based on the <a href="https://github.com/nikic/FastRoute">FastRoute</a> library and the short-name regular expressions are based on <a href="https://github.com/klein/klein.php">Klien.php</a>. However, the route component is mainly based on the <a href="https://github.com/DASPRiD/Dash">Dash</a> library.</p>

        <p>Custom <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php">routes</a> can also be configured by adding a <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php#L45">class name</a> to the array, or the configuration can be a <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php">route</a> object.</p>

        <h3 id="automatic-routes">Automatic Routes</h3>
        <p>A controller can be automatically matched to a url with the <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Controller.php#L196">controller match</a> function and using a single route configuration.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>return [
    'app' =&gt; [
        'defaults' =&gt; ['controller' =&gt; 'home'],
        'options' =&gt; [
            'prefix' =&gt; 'App',
            'suffix' =&gt; '\Controller'
            'strict' =&gt; false,
        ],
        'path' =&gt; '/[{controller::*$}]'
    ]
];
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Controller.php#L196">controller match</a> function will change the first letter of each word separated by a forward slash in the url into an uppercase letter. It then replaces the forward slash with a back slash to create a fully qualified class name and will try to load a matching controller. In order to ensure that it is a valid controller, the configuration should prepend a namespace and append a suffix.</p>

        <p>Strict mode does not change the case sensitivity of the controller name. However, most urls are lower case and file names and directories typically begin with an uppercase. This prevents controllers from being auto-loaded. This can be resolved by using a service loader and having a service configuration with a matching lower case name. The service configuration will then specify the name of the class to use, e.g <code>'home\controller' =&gt; Home\Controller::class</code>.</p>

        <p>When a <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Route.php#L55">controller</a> is specified, it must have a service configuration value (or real value) that <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L572">resolves</a> to a <a href="http://php.net/manual/en/language.types.callable.php">callable</a> type. If it does not have a <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php">plugin configuration</a> and its class exists, a new instance will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Build.php#L124">created</a> and <a href="#autowiring">autowired</a>.</p>

        <p>Controller names prefixed with the <a href="https://github.com/mvc5/mvc5/blob/master/src/Arg.php#L13"><code>@</code></a> symbol will be directly <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L394">invoked</a> because they are either a <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L36">function</a> or a <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L32">static class method</a>.</p>

        <h3 id="url-generator">Url Generator</h3>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php">url plugin</a> can <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Route/Generator.php">generate</a> urls with or without a route configuration and are <a href="https://tools.ietf.org/html/rfc3986">RFC 3986</a> <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Assemble.php">encoded</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'dashboard' =&gt; [
    'path'      =&gt; '/dashboard/{user}',
    'controller' =&gt; 'dashboard',
    'children' =&gt; [
        'add' =&gt; [
            'path' =&gt; '/add[/{wildcard::*$}]',
            'controller' =&gt; 'dashboard\add',
            'wildcard'   =&gt; true,
        ]
    ]
]
</code></pre>
        </div>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>echo $this-&gt;url(['dashboard', 'user' =&gt; 'phpdev']);
</code></pre>
        </div>

        <p>Route configurations must be <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Route/Generator.php#L74">named</a> and <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Path.php#L41">child routes</a> of the current parent route can <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php#L127">automatically</a> use their parent route parameters, e.g <code>/dashboard/phpdev/add</code>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>echo $this-&gt;url('dashboard/add');
</code></pre>
        </div>

        <p><a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Wildcard.php">Wild card</a> parameters can be added by using the <code>{wildcard::*$}</code> route expression and enabling it with <code>'wildcard' =&gt; true</code>. The parameters are <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Route/Generator.php#L225">appended</a> to the url and will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Wildcard.php#L87">added</a> to the parameters for that request, e.g <code>/dashboard/phpdev/add/type/tasks</code>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>echo $this-&gt;url(['dashboard/add', 'type' =&gt; 'tasks']);
</code></pre>
        </div>

        <p>Urls can also be <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php#L117">generated</a> without having or using a route configuration by prefixing the path with a forward slash.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>echo $this-&gt;url('/dashboard/phpdev/list', ['order' =&gt; 'desc'], '', ['absolute' =&gt; true]);
</code></pre>
        </div>

        <p>The second parameter of the <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php">url plugin</a> function is for <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php#L148">query</a> string arguments, e.g <code>/dashboard/phpdev/list?order=desc</code>. The third parameter is for the <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php#L148">fragment</a> and the fourth parameter can be used to generate an <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php#L68">absolute</a> url; the current scheme, host and port will be used if not provided. The <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php">url plugin</a> class can also be <a href="https://github.com/mvc5/mvc5/blob/master/src/Url/Plugin.php#L52">configured</a> to always generate an absolute url.</p>

        <h2 id="rest-api-methods">REST API Methods</h2>
        <p>Routes can be configured with <a href="https://github.com/mvc5/mvc5/blob/master/src/Route/Match/Action.php">actions</a> for specific HTTP methods. The default action is specified with the controller configuration.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'resource' =&gt; [
    'path' =&gt; '/resource',
    'method' =&gt; ['GET', 'POST'],
    'controller' =&gt; 'Resource\Controller'
    'action' =&gt; [
        'POST' =&gt; function(Url $url) {
            return new Response\RedirectResponse($url(), 201);
        }
    ]
]
</code></pre>
        </div>

        <h2 id="action-controller">Action Controller</h2>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Controller/Action.php">action controller</a> is used to control the <a href="https://github.com/mvc5/mvc5/blob/master/src/Controller/Action.php#L24">invocation</a> of the controller specified by the <a href="https://github.com/mvc5/mvc5/blob/master/src/Controller/Response.php#L50">request</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function __invoke($controller, array $args = [])
{
    return $this-&gt;action($controller, $args);
}
</code></pre>
        </div>

        <p>A controller is a function, it can also be an <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> or a plugin that <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L84">resolves</a> to a <a href="http://php.net/manual/en/language.types.callable.php">callable</a> function. If the value returned from the controller is not a <a href="https://github.com/mvc5/mvc5/blob/master/src/Http/Response.php">Http\Response</a> and it is not null, it will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Dispatch.php#L79">set</a> as the value of the response body for the remaining components to transform into a value that can be sent to the client.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'web' =&gt; [
    'route\dispatch',
    'request\error',
    'request\service',
    'controller\action',
    'view\layout',
    'view\render',
    'response\status',
    'response\version',
    'response\send'
],
</code></pre>
        </div>

        <h2 id="middleware">Middleware</h2>
        <p><a href="https://github.com/mvc5/mvc5/blob/master/src/Middleware.php">Middleware</a> applications can be created with a configuration that supports anonymous functions, <a href="#plugins">plugins</a> and <a href="#dependency-injection">dependency injection</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'web' =&gt; [
    'web\route',
    'web\error',
    'web\service',
    'web\controller',
    'web\layout',
    'web\render',
    'web\status',
    'web\version',
    'web\send',
],
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Web/Controller.php">web\controller</a> calls the controller and if the returned value is not a <a href="https://github.com/mvc5/mvc5/blob/master/src/Http/Response.php">Http\Response</a> and it is not null, it will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Dispatch.php#L79">set</a> as the value of the response body for the remaining components to transform into a value that can be <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Send/Send.php#L35">sent</a> to the client.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function __invoke(Request $request, Response $response, callable $next)
{
    return $next($request, $this-&gt;send($response));
}
</code></pre>
        </div>

        <p>The PSR-7 Middleware demo can be enabled by uncommenting the <a href="https://github.com/mvc5/mvc5-application/blob/master/config/service.php#L67">web configuration</a> in the <a href="#web-application">web application</a> service config file.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>//middleware demo
//'web' =&gt; 'web\middleware',
</code></pre>
        </div>

        <h2 id="view-models">View Models</h2>
        <p>Controllers can return a <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> that is <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Template/Render.php">rendered</a> using a specified <a href="https://github.com/mvc5/mvc5/blob/master/src/Model/Template.php#L17">template</a>. For convenience, controllers can use a <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model trait</a> that contains methods for returning a <a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">view model</a> with  assigned variables. It has two methods <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Model.php#L31">model</a> and <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Model.php#L45">view</a>. Either can be used depending on if the name of the template is specified. If a <a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">view model</a> is <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Model.php#L22">injected</a>, a copy of it is returned with the assigned variables; otherwise a default <a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">view model</a> is <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Model.php#L33">created</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>use Mvc5\View\Model;

class Controller
{
    use Model;

    public function __invoke()
    {
        return $this-&gt;model(['message' =&gt; 'Hello World']);
        // or
        return $this-&gt;view('home', ['message' =&gt; 'Hello World']);
    }
}
</code></pre>
        </div>

        <h3 id="rendering-view-models">Rendering View Models</h3>
        <p><a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">View models</a> specify the name of the template to be <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Renderer.php">rendered</a> with. Template names can also have an associated <a href="https://github.com/mvc5/mvc5-application/blob/master/config/template.php">template configuration</a> specifying the full path to the template file. If the template name <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Template/Find.php#L34">contains a dot</a> it is considered to be a full path to the template file. Otherwise it is the file path <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Template/Find.php#L35">relative to the application view directory</a> without the <code>.phtml</code> file extension.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function __invoke($model, array $vars = [])
{
    return $this-&gt;view-&gt;render($model, $vars);
}
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Renderer.php">renderer</a> function accepts two arguments. The first argument is the name of the view model or the name of the relative template path. The second argument is the array of variables to assign to the view model and template.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>echo $this-&gt;render('/home/index', ['request' =&gt; $request]);
</code></pre>
        </div>

        <p>By <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Template/Model.php#L30">prefixing</a> the template name with the directory separator, the view <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Renderer.php">renderer</a> will not use the <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Service.php">service locator</a> to find an associated <a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">view model</a> and instead will create a <a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">default view model</a> with the assigned variables.</p>

        <h3 id="view-engine">View Engine</h3>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Engine/PhpEngine.php">default view engine</a> will <a href="http://php.net/manual/en/closure.bind.php">bind</a> the <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> to a <a href="http://php.net/manual/en/class.closure.php">closure</a> and <a href="http://php.net/manual/en/function.extract.php">extract</a> its variables before <a href="http://php.net/manual/en/function.include.php">including</a> the template. The scope of the template is the <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> itself.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function render(TemplateModel $template)
{
    return (function() {
        /** @var TemplateModel $this */

        extract($this-&gt;vars(), EXTR_SKIP);

        ob_start();

        try {

            include $this-&gt;template();

            return ob_get_clean();

        } catch(\Throwable $exception) {
            throw $exception;
        }
    })-&gt;call($template);
}
</code></pre>
        </div>

        <h3 id="template-layouts">Template Layouts</h3>
        <p>If a <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewLayout.php">layout</a> is required, the <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Template/Layout/Layout.php#L33">assigned</a> to it as part of the <a href="https://github.com/mvc5/mvc5/blob/master/config/event.php#L31">web</a> function.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>protected function layout(TemplateLayout $layout, $model)
{
    return !$model instanceof TemplateModel || $model instanceof TemplateLayout ? $model :
        $layout-&gt;withModel($model);
}
</code></pre>
        </div>

        <h3 id="view-plugins">View Plugins</h3>
        <p>The default <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> supports <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php">plugins</a> and requires a <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Service.php">service locator</a> to be injected prior to being <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Template/Render.php">rendered</a>. However, because a <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> can be created by a controller, this may not of happened. To overcome this, the current <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Service.php">service locator</a> will be <a href="https://github.com/mvc5/mvc5/blob/master/src/View/Template/Model.php#L52">injected</a> into the <a href="https://github.com/mvc5/mvc5/blob/master/src/View/ViewModel.php">view model</a> if it does not already have one.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code><span class="cp">&lt;?php</span>

<span class="sd">/** @var Mvc5\ViewModel $this */</span>

<span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">url</span><span class="p">(</span><span class="s1">'home'</span><span class="p">);</span>
</code></pre>
        </div>

        <h2 id="events">Events</h2>
        <p>An <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> is a function. However, instead of being implemented as a single function, it is implemented across multiple functions; which can be easily extended via its <a href="https://github.com/mvc5/mvc5/blob/master/config/event.php">configuration</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function action($controller, array $args = [])
{
    return $this-&gt;call($controller, $args);
}
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> function <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L28">can</a> also <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Generator.php#L31">generate</a> an <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a>. However, sometimes it may be preferable to pass the event arguments directly to its constructor, in which case the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Generator.php#L87">trigger</a> method can be used.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function match($route, $request)
{
    return $this-&gt;trigger([Arg::ROUTE_MATCH, Arg::ROUTE =&gt; $route, Arg::REQUEST =&gt; $request]);
}
</code></pre>
        </div>

        <p>When the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> method is used to <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Generator.php#L31">generate</a> an <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> that does not have a plugin configuration, an instance of the <a href="https://github.com/mvc5/mvc5/blob/master/src/Event.php">default event model</a> will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L59">created</a>. This allows a common model parameter to be used by the functions of the <a href="https://github.com/mvc5/mvc5/blob/master/src/Event.php">event</a> to contain a value that is not null.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function __invoke(callable $callable, array $args = [], callable $callback = null)
{
    $model = $this-&gt;signal(
        $callable,
        !$args ? $this-&gt;args() : (!is_string(key($args)) ? $args : $this-&gt;args() + $args), $callback
    );

    null !== $model
        <span class="err">&amp;&amp;</span> $this-&gt;model = $model;

    return $model;
}
</code></pre>
        </div>

        <h3 id="event-configuration">Event Configuration</h3>
        <p>Events are <a href="https://github.com/mvc5/mvc5/blob/master/config/event.php">configurable</a> and can be an array or an <a href="http://php.net/manual/en/class.iterator.php">iterator</a>. Each item returned must <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L468">resolve</a> to a <a href="http://php.net/manual/en/language.types.callable.php">callable</a> type.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'web' =&gt; [
    'route\dispatch',
    'request\error',
    'request\service',
    'controller\action',
    function($response) { //named args
        var_dump(__FILE__, $response);
    },
    'view\layout',
    'view\render',
    'response\status',
    'response\version',
    'response\send'
],
</code></pre>
        </div>

        <h2 id="dependency-injection">Dependency Injection</h2>
        <p>When a class object is <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Builder.php#L34">created</a> and it can not be <a href="#autowiring">autowired</a>, then a service configuration is required. Different types of configurations can be used depending on the requirements of the class. These configurations can be either a string, an array, an anonymous function, a <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> <a href="#plugins">plugin</a> or a real value.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>[
    'home'          =&gt; Home\Controller::class,
    'request'       =&gt; Mvc5\Request\HttpRequest::class,
    'response'      =&gt; Mvc5\Response\HttpResponse::class,
    'url'           =&gt; new Shared('url\plugin'),
    'url\generator' =&gt; [Mvc5\Url\Generator::class, new Param('routes')],
    'url\plugin'    =&gt; [Mvc5\Url\Plugin::class, new Shared('request'), new Plugin('url\generator')],
    'web'           =&gt; new Response('web')
];
</code></pre>
        </div>

        <p>A string configuration is used to map a class name, or a short name, or an interface name to a fully qualified class name, or another configuration name. Because it is a string configuration, the class either has no dependencies or it can be <a href="#autowiring">autowired</a>. An array configuration is used when there are required dependencies and its configuration can be further reduced by using array key names for the arguments that can not be <a href="#autowiring">autowired</a>. An anonymous function is used when the class instantiation requires custom logic and various <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php">plugins</a> are available as <a href="#named-arguments-and-plugins">named arguments</a>.</p>

        <p>However, when the dependencies of a class require their own dependencies, then the depth of the dependency graph increases. In this case, a class object can also be created using a <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> <a href="#plugins">plugin</a> instead of using an anonymous function or factory method. This provides inversion of control and is a configuration domain specific language. Each <a href="#plugins">plugin</a> must implement the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> interface so that the system can distinguish them from other objects and invoke their associated function. Plugins can be used by each other and chained together to form a composite <a href="#plugins">plugin</a> and are only required when an explicit configuration is needed.</p>

        <h3 id="service-container">Service Container</h3>
        <p><a href="#plugins">Plugins</a> can be grouped together and accessed via the <a href="http://php.net/manual/en/class.arrayaccess.php">ArrayAccess</a> interface or using the <a href="https://github.com/mvc5/mvc5/blob/master/src/Arg.php#L104">arrow</a> notation, e.g. <code>dashboard-&gt;home</code>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>use Mvc5\App;
use Mvc5\Plugin\Plugins;
use Mvc5\Plugin\Value;

$app = new App([
    'services' =&gt; [
        'dashboard' =&gt; new Plugins(
            [
                'home' =&gt; function($template) {
                    return function($view, $form) use($template) {
                        return $this-&gt;call($view, [$template, $form + ['message' =&gt; 'Demo Page']]);
                    };
                },
                'template' =&gt; new Value('dashboard/index')
            ],
            new Link, //reference to parent container
            true //use current container as the scope for anonymous functions
        ),
        'view' =&gt; function() {
            return function($template, $var) {
                include $template;
            };
        },
    ]
]);

//$app['dashboard']['home'];
//$app['dashboard-&gt;home'];

$app-&gt;call('dashboard-&gt;home', ['form' =&gt; []]);
</code></pre>
        </div>

        <p>A container can contain any type of value, except for <a href="http://php.net/manual/en/language.types.null.php">null</a>. A parent container can also pass itself to a child container as the service <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L71">provider</a> to use when the child container can not retrieve or resolve a particular value. The parent container can also specify what object to use as the scope of an anonymous service function within the child container.</p>

        <h3 id="autowiring">Autowiring</h3>
        <p>The required arguments of a class constructor are automatically resolved by a <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Manager.php">service manager</a> when it <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Build.php#L124">instantiates</a> a class that</p>

        <ul>
            <li>does not have a service <a href="#plugins">plugin</a> configuration,</li>
            <li>or no arguments are passed to the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L251">plugin</a> method,</li>
            <li>or the arguments are <a href="#named-arguments">named</a>.</li>
        </ul>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Service/Service.php">service locator</a> will resolve the required constructor arguments either by their type hint, or parameter name.</p>

        <p>For a function or class method being invoked by the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> method, the missing required arguments are also automatically <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php">resolved</a>. However, they are <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php">resolved</a> in the opposite order, first  by their parameter name, then by their type hint. Otherwise, an exception will be <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L69">thrown</a> since the required parameter has not been provided.</p>

        <h3 id="plugins">Plugins</h3>
        <p>Various types of plugins are available to use and custom plugins can be created.</p>

        <h3 id="app"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/App.php">App</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'dashboard' =&gt; new App(new FileInclude(__DIR__ . '/dashboard.php')),
</code></pre>
        </div>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/App.php">app</a> plugin is used to provide a scoped instance of the <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">Mvc5\App</a> and uses the current application as its fallback service provider.</p>

        <h3 id="args"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Args.php">Args</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'request' =&gt; [
    Request\Config::class,
    'config' =&gt; new Args([
        'hostname' =&gt; new Call('request.getHost'),
        'method'   =&gt; new Call('request.getMethod'),
        'path'     =&gt; new Call('request.getPathInfo'),
        'scheme'   =&gt; new Call('request.getScheme')
    ])
],
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Args.php">args</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L209">used</a> to return an array of values that are resolved just in time, e.g. when the class is being instantiated.</p>

        <h3 id="call"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Call.php">Call</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Call('Home\Controller', ['response' =&gt; new Plugin('Response')])
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Call.php">call</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L205">used</a> to invoke an object or method and supports <a href="#named-arguments">named arguments and plugins</a>.</p>

        <h3 id="callback"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Callback.php">Callback</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Callback(function() {
    $messages = $this-&gt;plugin('messages');
})
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Callback.php">callback</a> plugin binds the scope of the application to a <a href="http://php.net/manual/en/class.closure.php">closure</a>. The <a href="http://php.net/manual/en/class.closure.php">closure</a> can then access the application’s public service methods.</p>

        <h3 id="calls"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Calls.php">Calls</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'route\dispatch' =&gt; new Calls(new Plugin(Mvc5\Route\Dispatch::class), ['service' =&gt; new Link])
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Calls.php">calls</a> plugin is similar to a <a href="#hydrator">hydrator</a> and is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L185">used</a> to resolve a plugin with a set of function calls and supports <a href="#named-arguments">named arguments</a>.</p>

        <h3 id="child"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Child.php">Child</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'manager'         =&gt; new Plugin(null),
'service\manager' =&gt; new Child(Service\Manager::class, 'manager'),
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Child.php">child</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L189">used</a> to extend a parent plugin. The first parameter is the name of the class to create and the second is the name of the parent plugin. Custom child configurations can also be created to allow another <a href="#plugin">plugin</a> to be used without having to specify the name of its parent. Examples are the <a href="#controller">controller</a>, <a href="#factory">factory</a>, <a href="#form">form</a> and <a href="#manager">manager</a> plugins.</p>

        <h3 id="config"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Config.php">Config</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'Home\Controller' =&gt; [Home\Controller::class, 'config' =&gt; new Config]
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Config.php">config</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L189">used</a> to provide the main configuration array or object.</p>

        <h3 id="controller"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Controller.php">Controller</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'controller'      =&gt; new Hydrator(null, ['request' =&gt; new Plugin('request')]),
'Home\Controller' =&gt; new Controller(Home\Controller::class),
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Controller.php">controller</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L189">used</a> to provide the constructor arguments and call methods for a controller without having to specify the name of its parent <em>controller</em> plugin. This is a convenience plugin for when controllers have a similar method of instantiation.</p>

        <h3 id="copy"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Copy.php">Copy</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Copy(new Plug('response'))
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Copy.php">copy</a> plugin can be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L254">used</a> to <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L468">resolve</a> and <a href="http://php.net/manual/en/internals2.opcodes.clone.php">clone</a> an object.</p>

        <h3 id="end"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/End.php">End</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new End(new Call('@session_start'), new Plugin(Session\Config::class));
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/End.php">end</a> plugin will <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L468">resolve</a> a list of plugins and return the result of the last plugin.</p>

        <h3 id="factory"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Factory.php">Factory</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'factory'         =&gt; new Service(null),
'Home\Controller' =&gt; new Factory(Home\Controller::class),
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Factory.php">factory</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L181">used</a> to create a class object without having to specify the name of its parent <em>factory</em> plugin.</p>

        <h3 id="fileinclude"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/FileInclude.php">FileInclude</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new FileInclude('config/templates.php'),
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/FileInclude.php">file include</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L243">used</a> to <a href="http://php.net/manual/en/function.include.php">include</a> and evaluate a specified file. The name of the file can also be resolved via another plugin.</p>

        <h3 id="filter"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Filter.php">Filter</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'response' =&gt; new Filter(
    new Plugin(Response::class), [function($response) { return $response;  }], [], 'response'
)
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Filter.php">filter</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L221">used</a> to pass a value from one function to the next and returns the result of the last function called. If a function returns null, the iteration is stopped and null is returned. If a function returns false, the iteration is stopped and the previous value, or current object, is returned. The third parameter contains any additional arguments and the fourth parameter specifies the name of the argument for the value that is being filtered.</p>

        <h3 id="form"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Form.php">Form</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'form'    =&gt; new Service(null),
'my\form' =&gt; new Form(My\Form::class),
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Form.php">form</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L189">used</a> create a class object without having to specify the name of its parent <em>form</em> plugin.</p>

        <h3 id="globalvar"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/GlobalVar.php">GlobalVar</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new GlobalVar('_COOKIE')
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/GlobalVar.php">global var</a> plugin is a <a href="#value">value</a> plugin that returns the value assigned to the PHP <a href="http://php.net/manual/en/reserved.variables.globals.php"><code>$GLOBALS</code></a> array for the specified parameter name.</p>

        <h3 id="hydrator"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Hydrator.php">Hydrator</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'route\dispatch' =&gt; new Hydrator(Mvc5\Route\Dispatch::class, ['service' =&gt; new Link])
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Hydrator.php">hydrator</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L194">used</a> to create an object with a <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> plugin name and a set of calls to invoke. Using null for the parameter name is a convenient way for it to be used as a parent plugin. When the array key of its calls configuration is a string, it is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L149">used</a> as the name of the method to call on the newly created object and passes its array value as a single <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> argument. However, if the string is prefixed with the $ symbol, the string is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L292">used</a> as the name of the object property to set. If a method needs to be called more than once, then an array of methods can be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L296">used</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'route'  =&gt; new Hydrator(
    Mvc5\Route\Config::class, [['set', 'controller', 'Home\Controller'], ['set', 'name', 'home']]
)
</code></pre>
        </div>

        <p>Additionally, any <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> plugin can be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L31">called</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'route'  =&gt; new Hydrator(Mvc5\Route\Config::class, [new Call('response.setStatus', [500])]),
</code></pre>
        </div>

        <p>When an array configuration is used, the current object is passed to the called methods as a named argument called <em>item</em>. This can be changed by adding a value to the beginning of the array with the name of the parameter to use.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'service'  =&gt; new Hydrator(
    ArrayObject::class, ['$current', new Object, 'index' =&gt; 'foo', 'bar' =&gt; 'baz']
)
</code></pre>
        </div>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>class Object
{
    function __invoke($index, $current, $bar)
    {
        return $current[$index] = $bar; //i.e $current['foo'] = 'baz'
    }
}
</code></pre>
        </div>

        <h3 id="invokable"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Invokable.php">Invokable</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>$response = $app-&gt;call(new Invokable(new Plugin('response')));
</code></pre>
        </div>

        <p>An <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Invokable.php">invokable</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L234">used</a> to return an anonymous function. When invoked, it will resolve and return its configured value.</p>

        <h3 id="invoke"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Invoke.php">Invoke</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Invoke('response.setStatusCode', [500]),
new Invoke(new Args([new Plugin('response'), 'setStatusCode']), [500]),
new Invoke(function() { var_dump(func_get_args()); }),
</code></pre>
        </div>

        <p>An <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Invoke.php">invoke</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L237">used</a> to return an anonymous function. When invoked, it will <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L468">resolve</a> and <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> its configured value with the optional array of parameters passed to the anonymous function. The parameters are merged with the plugin’s args parameters.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>$app-&gt;call(new Invoke(new Plugin('Home\Controller')), ['request' =&gt; new Plugin('Request')])
</code></pre>
        </div>

        <h3 id="link"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Link.php">Link</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'request\service' =&gt; [Mvc5\Request\Service::class, new Link]
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Link.php">link</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L217">used</a> to return the current service object. It can also be used as a <a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Config.php">configuration</a> object to delay the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Container.php#L70">creation</a> of a particular value until it is required.</p>

        <h3 id="nullvalue"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/NullValue.php">NullValue</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new NullValue
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/NullValue.php">null value</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L312">used</a> to return a null value. It can be used to <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L510">prevent</a> a callback provider from being <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L511">invoked</a>.</p>

        <h3 id="param"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Param.php">Param</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Param('templates.home')
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Param.php">param</a> is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L201">used</a> to retrieve a configuration value and <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L349">uses</a> a dot notation for arrays and objects with <a href="http://php.net/manual/en/class.arrayaccess.php">ArrayAccess</a>.</p>

        <h3 id="plug"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Plug.php">Plug</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Plug('controller\exception')
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Plug.php">plug</a> is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L225">used</a> to return the value of another plugin configuration.</p>

        <h3 id="plugin"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Plugin.php">Plugin</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'router' =&gt; new Plugin(Mvc5\Route\Router:class, [new Param('routes')], ['service' =&gt; new Link])
</code></pre>
        </div>
        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Plugin.php">plugin</a> is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L193">used</a> to instantiate a class object.  It requires the name of a <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> plugin and optionally, its constructor arguments and a set of calls to invoke. See the <a href="#hydrator">hydrator</a> plugin for details on how to specify the calls to invoke.</p>

        <h3 id="plugins-1"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Plugins.php">Plugins</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Plugins(__DIR__.'/services.php')
</code></pre>
        </div>
        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Plugins.php">plugins</a> config is used to instantiate an <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">application</a> class. The first parameter is an array of service plugins, the second parameter defaults to using the current application as the provider for any missing services. The third parameter sets the <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">application</a> as the <a href="http://php.net/manual/en/closure.bind.php">scope</a> for any anonymous functions within service array plugin configuration.</p>

        <h3 id="provide"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Provide.php">Provide</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Provide($config, array $args = [])
</code></pre>
        </div>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Provide.php">provide</a> plugin is used to retrieve a value from its parent container.</p>

        <h3 id="register"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Register.php">Register</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'user' =&gt; new Register('user', 'session', new Plugin(Mvc5\Config::class))
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Register.php">register</a> plugin will create an object if it is not already registered with a specified (<a href="https://github.com/mvc5/mvc5/blob/master/src/Config/Configuration.php">configuration</a>) object. The first parameter is the registered name, the second parameter is the name of the <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L51">service configuration</a> that should contain the registered object. The third parameter is the <a href="#plugins">plugin</a> configuration for the object to create and register if it does not already exist.</p>

        <h3 id="response"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Response.php">Response</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'web' =&gt; new Response('web')
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Response.php">response</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L193">used</a> to <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Dispatch.php">dispatch</a> a <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Response.php">response</a>. It configures the <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L43">response dispatch plugin</a> with the name of the <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> to use and an optional <a href="https://github.com/mvc5/mvc5/blob/master/src/Request/Request.php">request</a> and <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Response.php">response</a> object. Each <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> function can return a <a href="https://github.com/mvc5/mvc5/blob/master/src/Request/Request.php">request</a> or <a href="https://github.com/mvc5/mvc5/blob/master/src/Response/Response.php">response</a> object for the the next function to use.</p>

        <h3 id="scope"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Scope.php">Scope</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Scope(
  Request\Config::class,
  [new _Plugin(App::class, [[Arg::SERVICES =&gt; $plugins], null, true, true]), new Link]
)
</code></pre>
        </div>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Scope.php">scope</a> plugin is used to set the scope of an <a href="https://github.com/mvc5/mvc5/blob/master/src/App.php">application</a> to the class that is being created. A <a href="http://php.net/manual/en/class.closure.php">Closure</a> within the application’s configuration will then have the same scope as the class being created and can access its protected properties.</p>

        <h3 id="scoped"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Scoped.php">Scoped</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Scoped($this)
</code></pre>
        </div>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Scoped.php">scoped</a> plugin is used to provide a <a href="http://php.net/manual/en/class.closure.php">Closure</a> with the scope of the application. The first parameter of the plugin is a function that is called when the plugin is being resolved. The function returns a <a href="http://php.net/manual/en/class.closure.php">Closure</a> and its scope is set to the scope of the application.</p>

        <h3 id="scopedcall"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/ScopedCall.php">ScopedCall</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new ScopedCall($this)
</code></pre>
        </div>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/ScopedCall.php">scoped call</a> plugin extends the <a href="#call">call</a> plugin and uses the <a href="#scoped">scoped</a> plugin to set the scope of the closure for it to be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">called</a> with.</p>

        <h3 id="service"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Service.php">Service</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'router' =&gt; new Service(Mvc5\Route\Router:class, [new Param('routes')])
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Service.php">service</a> plugin is similar to a <a href="#plugin">plugin</a> and is used to add a call to a <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Service.php#L20">service</a> method to set the current service object.</p>

        <h3 id="session"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Session.php">Session</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'user' =&gt; new Session('user', new Plugin(Mvc5\Config::class))
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Session.php">session</a> plugin is a <a href="#register">register</a> plugin that retrieves a session variable. The first parameter is the name of the session variable, the optional second parameter is the plugin configuration for the object to create if it does not already exist in the session. If a value already exists in the session, it will be returned and a new object will not be created.</p>

        <h3 id="shared"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Shared.php">Shared</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Shared('response')
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Shared.php">shared</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L197">used</a> to create a <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Container.php#L165">shared</a> value. When used as a configuration value, it should specify another configuration in order to prevent a recursion error. Alternatively, a configuration can be passed as a second argument to its constructor.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'response' =&gt; new Shared('response', new Plugin(Http\Response::class))
</code></pre>
        </div>

        <h3 id="value"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Value.php">Value</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Value('A demo web page')
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/Value.php">value</a> plugin is used to return a string value from the services container instead of the main configuration. Otherwise the container will assume that the string is the name of a class to instantiate.</p>

        <h3 id="viewmodel"><a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/ViewModel.php">ViewModel</a></h3>
        <div class="language-php highlighter-rouge"><pre class="highlight"><code>new Model('error/404', ['message' =&gt; 'A 404 error occurred'])
</code></pre>
        </div>

        <p>A <a href="https://github.com/mvc5/mvc5/blob/master/src/Plugin/ViewModel.php">view model</a> plugin is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L187">used</a> to create a <a href="https://github.com/mvc5/mvc5/blob/master/src/ViewModel.php">view model</a>. Its first parameter is the template name and the second parameter contains its values.</p>

        <h3 id="service-providers">Service Providers</h3>
        <p>Custom plugins can implement the <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolvable.php">resolvable</a> interface and extend an existing <a href="#plugins">plugin</a> or have their own <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L480">service provider</a>. A <a href="https://github.com/mvc5/mvc5-application/blob/master/config/service.php#L39">service provider</a> is a <a href="http://php.net/manual/en/language.types.callable.php">callable</a> function that is <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L480">invoked</a> when a <a href="#plugins">plugin</a> can not be <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Resolver.php#L511">resolved</a> by default.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>use Mvc5\Plugin\Config;
use Plugin\Controller;
use Service\Provider;

return [
    'Home\Controller'  =&gt; new Controller(Home\Controller::class),
    'service\provider' =&gt; [Service\Provider::class, new Config],
];
</code></pre>
        </div>

        <p>For example, the <a href="https://github.com/mvc5/mvc5-application/blob/master/src/Home/Controller.php">home controller</a> uses a custom <a href="https://github.com/mvc5/mvc5-application/blob/master/src/Plugin/Controller.php">controller plugin</a> with a <a href="https://github.com/mvc5/mvc5-application/blob/master/src/Service/Provider.php">service provider</a> for the <a href="https://github.com/mvc5/mvc5-application/blob/master/config/event.php#L45">service resolver event</a>.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function resolve($config, array $args = [])
{
    return $this-&gt;resolvable($config, $args, function($config) {
        if ($config instanceof Controller) {
            return $this-&gt;make($config-&gt;config());
        }

        return $config;
    });
}
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L67">service resolver</a> event is used to call the <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L63">service provider</a> and <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L41">an exception</a> is thrown if the <a href="#plugins">plugin</a> can not be resolved.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'service\resolver' =&gt; [
    'service\provider',
    'resolver\exception'
],
</code></pre>
        </div>

        <h2 id="named-arguments">Named Arguments</h2>
        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L21">call</a> method can <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L78">invoke</a> a function with <a href="https://en.wikipedia.org/wiki/Named_parameter">named arguments</a> when they are <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L22">named</a> or none are provided.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>$this-&gt;call(Arg::VIEW_RENDER, [Arg::MODEL =&gt; $model] + $args);
</code></pre>
        </div>

        <p>This allows a function to be called without having to provide all of its required parameters. Typically an exception would be <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L69">thrown</a>, but before it <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L72">occurs</a>, a callback function can be <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L59">used</a> to provide the missing arguments. Consequently, a service manager can provide <a href="https://github.com/mvc5/mvc5/blob/master/src/Resolver/Service.php#L80">itself</a> as the callback function to use.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>$this-&gt;signal($config, $args, $callback ?? $this);
</code></pre>
        </div>

        <p>An <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> can also control the parameters that are provided to its functions, as well as the outcome of each function.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>function __invoke(callable $callable, array $args = [], callable $callback = null)
{
    $model = $this-&gt;signal($callable, $this-&gt;args() + $args, $callback);

    null !== $model
        <span class="err">&amp;&amp;</span> $this-&gt;model = $model;

    return $model;
}
</code></pre>
        </div>

        <p>For example, the <code>dashboard:remove</code> event uses three functions to create a model and to return a <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L31">layout</a> object. It does not have its own <a href="https://github.com/mvc5/mvc5/blob/master/src/Event/Event.php">event</a> class, so an instance of the <a href="https://github.com/mvc5/mvc5/blob/master/src/Event.php">default event model</a> is used.</p>

        <div class="language-php highlighter-rouge"><pre class="highlight"><code>'dashboard:remove' =&gt; [
    function() {
        return $model = '<span class="nt">&lt;h1&gt;</span>Validate<span class="nt">&lt;/h1&gt;</span>';
    },
    function($model) {
        return $model . '<span class="nt">&lt;h1&gt;</span>Remove<span class="nt">&lt;/h1&gt;</span>';
    },
    function(TemplateLayout $layout, $model = null) {
        $model .= '<span class="nt">&lt;h1&gt;</span>Respond<span class="nt">&lt;/h1&gt;</span>';

        return $layout-&gt;withModel($model);
    }
]
</code></pre>
        </div>

        <p>The <a href="https://github.com/mvc5/mvc5/blob/master/src/Event.php">default event model</a> will store the result of the first function and pass it as the value of the model parameter of the second function. If the first function had required the model parameter, its value would of been null, because no value was given as an argument to the <a href="https://github.com/mvc5/mvc5/blob/master/src/Event.php">event</a> and no <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php">plugin</a> exists for the name <code>model</code>. In this example, the model parameter is a string, so the second function appends to it and returns it as the value of the model parameter of the third function. When the third function is invoked, the <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php">signal</a> method recognizes that the <a href="https://github.com/mvc5/mvc5/blob/master/config/service.php#L31">layout</a> parameter is missing and <a href="https://github.com/mvc5/mvc5/blob/master/src/Signal.php#L59">uses</a> the callback function to create it. As the model parameter is an argument of the <a href="https://github.com/mvc5/mvc5/blob/master/src/Event.php">default event model</a>, it can also be used as an optional parameter.</p>

    </div>
</div>
